import tensorflow as tf
import os
from tensorflow.python import pywrap_tensorflow
import numpy as np
import matplotlib.pyplot as plt
import sys
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
parser = ArgumentParser("scoring", formatter_class=ArgumentDefaultsHelpFormatter, conflict_handler='resolve')
parser.add_argument("--model", default='DistMult', type=str, help='model"')
parser.add_argument("--n_epoch", default=26, type=int, help='number of epochs"')
parser.add_argument('--data', default='wn18rr', type=str, help='dataset')

RANDOM_STATE = 42

def load_emb(dir = None, model_name = None, var_name = 'ent_emb', verbose = 1):
    """load from saved emb """
    tf.reset_default_graph()
    file = model_name
    model_path = os.path.join(dir, file)
    if verbose !=0: print('Loading from %s'%model_path)
    reader = pywrap_tensorflow.NewCheckpointReader(model_path)
    var_to_shape_map = reader.get_variable_to_shape_map()  # 'var_to_shape_map' is a dictionary contains every tensor in the model
    var = tf.get_variable(var_name, shape=var_to_shape_map[var_name])
    saver = tf.train.Saver([var])

    with tf.Session() as sess:
        saver.restore(sess, model_path)
        emb = var.eval()
    return emb

def emb_pca(emb, n_comp = 5, q_ofinterest = 'proj'):
    # emb = np.random.random((10,10)
    pca = PCA(n_components=n_comp, random_state=RANDOM_STATE)
    pca.fit(emb)

    if q_ofinterest == 'proj':
        proj = pca.fit_transform(emb)
        assert proj.shape == (emb.shape[0], n_comp)
        return proj
    elif q_ofinterest == 'eigval':
    # print(pca.explained_variance_ratio_)
        return pca.explained_variance_
    else:
        raise Exception('No such q_ofinterest %s'%q_ofinterest)

def emb_tsne(x = np.random.rand(3,4), n_comp = 2):
    from sklearn.manifold import TSNE
    x_embedded = TSNE(n_components=n_comp, random_state=RANDOM_STATE).fit_transform(x)
    # plt.scatter(x = x_embedded[:, 0], y = x_embedded[:, 1])
    # plt.show()
    return x_embedded

def trajs(indexes = [1], start = 1, end = 25, var_name ='ent_emb', data_name = 'fb15-237', model ='ComplEx'):
    dir = os.path.join(os.path.dirname(__file__), '../save_models/')
    trajs = []
    for n_epoch in range(start, end + 1):
        model_name = model + '-' + data_name + '-' + str(n_epoch)
        emb = load_emb(dir=dir, model_name=model_name, var_name=var_name, verbose=1)
        emb_sliced = np.array([emb[i,:] for i in indexes])
        trajs.append(emb_sliced)

    trajs = np.concatenate(trajs, axis=0)
    print('trajs of %s is of shape (%s)'%(var_name, trajs.shape))
    assert trajs.shape == ((end-start+1) * len(indexes), emb.shape[1])
    return trajs # array of shape [n_epoch * len(indexes), n_dim]


def viz_multi_traj(indexes = [2, 7, 5], start = 1, end = 25, var_name ='ent_emb', model =None, data_name = 'wn18rr'):
    trajs_ = trajs(indexes=indexes, start = 1, end = 25, var_name =var_name, model =model, data_name=data_name)
    trajs_pj = emb_pca(trajs_, n_comp=2, q_ofinterest='proj')
    plt.scatter(trajs_pj[:,0], trajs_pj[:,1], s=1)
    title_ = 'model %s, start=%s, end=%s, var=%s, data=%s' %(model, start, end, var_name, data_name)
    print('indexes is %s'%indexes)
    plt.title(title_)
    plt.show()
    sys.exit()

def multi_viz(n_row = 2, n_col = 2, dir = None, model = None,data_name = None,
              var_name = 'ent_emb', n_comp = 5, verbose = 0,
              viz_method = 'pca'):
    """
    viz the pca of embedding generated by model(ComplEx, Distmulti, ...)
    :param n_row:
    :param n_col:
    :param dir:
    :param model_name:
    :param var_name:
    :param n_comp:
    :return:
    """
    fig, axes = plt.subplots(n_row, n_col)
    assert model in ['ComplEx', 'DistMult']

    for row_idx in range(n_row):
        for col_idx in range(n_col):
            n_epoch = row_idx * n_col + col_idx + 1
            model_name = model + '-' + data_name + '-' + str(n_epoch)
            emb = load_emb(dir = dir, model_name=model_name, var_name=var_name, verbose=verbose)

            if viz_method == 'pca':
                eigvals = emb_pca(emb, n_comp=n_comp, q_ofinterest='eigval')
                print(eigvals)
                axes[row_idx, col_idx].plot(eigvals)
            elif viz_method == 'tsne':
                emb_proj = emb_tsne(emb)
                x_, y_ = np.array(emb_proj[:,0]), np.array(emb_proj[:,1])
                print(x_)
                axes[row_idx, col_idx].scatter(x_, y_, s=1)
            elif viz_method == 'mds':
                pass
            # axes[row_idx, col_idx].set_title(str(row_idx) + ' ' + str(col_idx))
    plt.title(model)
    plt.show()


if __name__ == '__main__':
    dir = os.path.join(os.path.dirname(__file__), '../save_models/')
    args = parser.parse_args()

    # viz trace
    # indexes = range(1, 10000, 100)
    # viz_multi_traj(indexes=indexes, var_name='ent_emb', data_name=args.data, model=args.model)


    multi_viz(n_row = 4, n_col = 4, dir = dir, data_name= args.data,
              model = args.model, var_name = 'ent_emb',
              n_comp = 25, verbose=1, viz_method='pca')


    # emb1 = load_emb(dir, model_name=model_name, var_name='ent_emb')
    # emb2 = load_emb(dir, model_name=model_name, var_name='ent_emb')
    # print(emb1 == emb2).all()



