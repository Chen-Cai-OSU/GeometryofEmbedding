import tensorflow as tf
import os
from tensorflow.python import pywrap_tensorflow
import numpy as np
import matplotlib.pyplot as plt

import sys
RANDOM_STATE = 42

def load_emb(dir = None, model_name = None, var_name = 'ent_emb', verbose = 0):
    """load from saved emb """
    tf.reset_default_graph()
    model_path = os.path.join(dir, model_name)
    if verbose !=0: print('Loading from %s'%model_path)
    reader = pywrap_tensorflow.NewCheckpointReader(model_path)
    var_to_shape_map = reader.get_variable_to_shape_map()  # 'var_to_shape_map' is a dictionary contains every tensor in the model
    var = tf.get_variable(var_name, shape=var_to_shape_map[var_name])
    saver = tf.train.Saver([var])

    with tf.Session() as sess:
        saver.restore(sess, model_path)
        emb = var.eval()
    return emb

def emb_pca(emb, n_comp = 5):
    # emb = np.random.random((10,10))
    from sklearn.decomposition import PCA
    import matplotlib.pyplot as plt

    pca = PCA(n_components=n_comp, random_state=RANDOM_STATE)
    pca.fit(emb)
    print(pca.explained_variance_ratio_)
    return pca.singular_values_

def multi_viz(n_row = 2, n_col = 2, dir = None, model = None, var_name = 'ent_emb', n_comp = 5, verbose = 0):
    """
    viz the pca of embedding generated by model(ComplEx, Distmulti, ...)
    :param n_row:
    :param n_col:
    :param dir:
    :param model_name:
    :param var_name:
    :param n_comp:
    :return:
    """
    fig, axes = plt.subplots(n_row, n_col)
    assert model in ['ComplEx']

    for row_idx in range(n_row):
        for col_idx in range(n_col):
            n_epoch = row_idx * n_col + col_idx + 1
            model_name = model + '-' + str(n_epoch)
            emb = load_emb(dir = dir, model_name=model_name, var_name=var_name, verbose=verbose)
            eigvals = emb_pca(emb, n_comp=n_comp)
            axes[row_idx, col_idx].plot(eigvals)
            axes[row_idx, col_idx].set_title(str(row_idx) + ' ' + str(col_idx))

    plt.show()


if __name__ == '__main__':
    dir = os.path.join(os.path.dirname(__file__), '../save_models/')
    model = 'ComplEx'
    multi_viz(n_row = 2, n_col = 2, dir = dir, model = model, var_name = 'ent_emb', n_comp = 25, verbose=1)


    # emb1 = load_emb(dir, model_name=model_name, var_name='ent_emb')
    # emb2 = load_emb(dir, model_name=model_name, var_name='ent_emb')
    # print(emb1 == emb2).all()



